---
# tasks file for ansible_dir/roles/docker-swarm/
- name: Install Pre-requisites
  apt:
    name: ca-certificates,curl,gnupg,lsb-release
    state: latest
    update_cache: yes
- name: Add an Apt signing key, will not download if present
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
    keyring: /usr/share/keyrings/docker-archive-keyring.gpg

- name: Add Docker stable repo
  apt_repository:
    repo: deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu   focal stable
    state: present
- name: Install Docker
  apt:
    name: "{{ item }}"
    state: latest
    update_cache: yes
  loop  :
    - docker-ce
    - docker-ce-cli
    - containerd.io
    - python
    - python3-pip
# - name: Install Ansible Docker Interpreter
#   pip:
#     name: docker-py
- name: Start & Enable Docker
  service:
    name: docker
    state: started
    enabled: yes
- name: Add Vagrant to Docker Group
  user:
    name: vagrant
    groups: docker
    append: yes
- name: check/init swarm
  docker_swarm:
    state: present
    advertise_addr: eth1
  register: __output_swarm
  when: inventory_hostname in groups['managers'][0]

- name: install worker
  docker_swarm:
    state: join
    timeout: 60
    advertise_addr: eth1
    join_token: "{{ hostvars[groups['managers'][0]]['__output_swarm']['swarm_facts']['JoinTokens']['Worker'] }}"
    remote_addrs: "{{ groups['managers'][0] }}"
  when: inventory_hostname in groups['workers']

- name: create traefik network
  docker_network:
    name: traefik_net
    driver: overlay
  when: inventory_hostname in groups['managers']

- name: Deploy traefik service
  docker_swarm_service:
    name: traefik
    placement:
      constraints: "node.role==manager"
    publish:
    - { published_port: "80", target_port: "80" }
    - { published_port: "443", target_port: "443" }
    mounts:
      - source: /var/run/docker.sock
        target: /var/run/docker.sock
        type: bind
    read_only: yes
    restart_config:
      condition: any
      delay: 30s
      max_attempts: 5
    networks:
      - "traefik_net"
    image: "traefik:latest"
    args:
    - "--log.level=INFO"
    - "--api.dashboard=true"
    - "--entryPoints.http.address=:80"
    - "--entryPoints.api.address=:8080"
    - "--entryPoints.https.address=:443"
    - "--providers.docker.swarmmode"
    labels:
      traefik.enable: "true"
      traefik.swarmmode: "true"
      traefik.docker.network: "traefik_net"
      traefik.http.routers.traefik-public-http.rule: "Host(`traefik.swarm`)"
      traefik.http.routers.traefik-public-http.entrypoints: "http"
      traefik.http.routers.traefik-public-http.service: "api@internal"
      traefik.http.services.traefik-public.loadbalancer.server.port: "8080"
    replicas: 1
  when: inventory_hostname in groups['managers'][0]
- name: install visualizer
  docker_swarm_service:
    name: visualizer
    image: dockersamples/visualizer
    networks:
      - "traefik_net"
    placement:
      constraints: "node.role==manager"
    mounts:
    - source: /var/run/docker.sock
      target: /var/run/docker.sock
      type: bind
    read_only: yes
    restart_config:
      condition: any
      delay: 30s
      max_attempts: 5
    labels:
      traefik.enable: "true"
      traefik.swarmmode: "true"
      traefik.docker.network: "traefik_net"
      traefik.http.routers.visu-public-http.rule: "Host(`visu.swarm`)"
      traefik.http.routers.visu-public-http.entrypoints: "http"
      traefik.http.services.visu-public.loadbalancer.server.port: "8080"
  when: inventory_hostname in groups['managers'][0]




# - name: Copy 
#   copy:
#     src: /home/omar/ansible/ansible_dir/docker
#     dest: /tmp/
# - name: Build First Test Images
#   docker_image:
#     name: myimage
#     build:
#       path: /tmp/docker
#     source: build
# - name: Create a data container
#   docker_container:
#     name: mydata
#     image: busybox
#     volumes:
#       - /data
